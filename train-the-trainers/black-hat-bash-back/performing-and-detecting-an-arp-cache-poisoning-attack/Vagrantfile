# Vagrant configuration for a simple ARP cache poisoning demo.
#
# This configuration sets up three different virtual machines.
# These machines are:
#
# * `red` - The attacker's machine.
# * `blue-desktop` - The "desktop" machine being attacked.
# * `blue-server` - Box that the `red` machine will impersonate.
#
# Each of these are attached to a VirtualBox host-only network
# and are assigned an IP address in the 172.22.33.0 network.
# Hopefully, this IP range will not conflict with a network in
# use on your system. (Change it if it does.)
#
# Moreover, the relevant virtual NIC of each machine has a specific
# MAC address associated with it that mirrors the IP address so as
# to make identifying the machine a little bit easier. The final
# byte of the MAC address matches the decimal number of the given
# machine's IP address.
#
# For example, the final octet of this machine's IP address is `55`
# and so the final hexadecimal number of its MAC address is `55`:
#
# ```sh
# 3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
#     link/ether 08:00:27:00:00:55 brd ff:ff:ff:ff:ff:ff
#     inet 172.22.33.55/24 brd 172.22.33.255 scope global enp0s8
#        valid_lft forever preferred_lft forever
# ```

Vagrant.configure("2") do |config|

  # A quick 'n' dirty provisioner for the Debian-derived systems.
  debian_script = <<-DEBIAN_SCRIPT
    apt update
    apt install --yes avahi-daemon avahi-utils xinit lxde lxsession-logout
  DEBIAN_SCRIPT

  config.vm.define "red" do |c|
    c.vm.box = "ubuntu/bionic64"
    c.vm.hostname = "red"
    c.vm.network "private_network",
      ip: "192.168.61.55",
      netmask: "255.255.255.0",
      :mac => "080027000055"
    c.vm.provision "Debian base", type: "shell", inline: debian_script
    c.vm.provision "Red team", type: "shell", inline: <<-SCRIPT
      apt install --yes \
        nmap arp-scan arping ettercap-text-only \
        golang-1.10 build-essential libpcap-dev \
        libusb-1.0-0-dev libnetfilter-queue-dev \
        dsniff # dsniff has `arpspoof` and friends
      ln -s /usr/lib/go-1.10/bin/go /usr/local/bin/go
      go get github.com/bettercap/bettercap
      mv ~/go/bin/bettercap /usr/local/bin/bettercap
      cp "/vagrant/Red Team/AnarchoTechNYC-RedTeam.png" "/etc/alternatives/desktop-background"
    SCRIPT
  end

  config.vm.define "blue-desktop" do |c|
    c.vm.box = "ubuntu/bionic64"
    c.vm.hostname = "blue-desktop"
    c.vm.network "private_network",
      ip: "192.168.61.50",
      netmask: "255.255.255.0",
      :mac => "080027000050"
    c.vm.provision "Debian base", type: "shell", inline: debian_script
    c.vm.provision "Blue desktop", type: "shell",
      inline: "cp '/vagrant/Blue Team/AnarchoTechNYC-BlueTeam.png' '/etc/alternatives/desktop-background'"
  end

  config.vm.define "blue-server" do |c|
    c.vm.box = "centos/7"
    c.vm.hostname = "blue-server"
    c.vm.network "private_network",
      ip: "192.168.61.10",
      netmask: "255.255.255.0",
      :mac => "080027000010"
    c.vm.provision "shell", inline: "mkdir -p /srv/www && chown vagrant:vagrant /srv/www"
    c.vm.provision "file", source: "Blue Team/server/www", destination: "/srv/www"
    c.vm.provision "Blue server", type: "shell" do |s|
      script = <<-SHELL
        cp "/vagrant/Blue Team/server/python-simplehttpserver.service" /etc/systemd/system/ \
          && systemctl enable python-simplehttpserver.service \
          && systemctl start  python-simplehttpserver.service
        yum -y install avahi && systemctl start avahi-daemon.service
      SHELL
      s.inline = script
    end
  end

end
